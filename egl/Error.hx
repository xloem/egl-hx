package egl;

// An error generated by an EGL call.
class Error { }

// Function succeeded.
class Success extends Error {
	public static inline var CODE = 0x3000;
	public static inline var MEANING = "Function succeeded.";
}

// EGL is not initialized, or could not be initialized, for the specified display.
// Any command may generate this error.
class NotInitialized extends Error {
	public static inline var CODE = 0x3001;
	public static inline var MEANING = "EGL is not initialized, or could not be initialized, for the specified display.";
}

// EGL cannot access a requested resource (for example, a context is bound in
// another thread).
// Any command accessing a named resource may generate this error.
class BadAccess extends Error {
	public static inline var CODE = 0x3002;
	public static inline var MEANING = "EGL cannot access a requested resource (for example, a context is bound in another thread).";
}

// EGL failed to allocate resources for the requested operation.
// Any command allocating resources may generate this error.
class BadAlloc extends Error {
	public static inline var CODE = 0x3003;
	public static inline var MEANING = "EGL failed to allocate resources for the requested operation.";
}

// An unrecognized attribute or attribute value was passed in an attribute list.
// Any command taking an attribute parameter or attribute list may generate this
// error.
class BadAttribute extends Error {
	public static inline var CODE = 0x3004;
	public static inline var MEANING = "An unrecognized attribute or attribute value was passed in an attribute list.";
}

// An EGLConfig argument does not name a valid EGLConfig.
// Any command taking an EGLConfig parameter may generate this error.
class BadConfig extends Error {
	public static inline var CODE = 0x3005;
	public static inline var MEANING = "An EGLConfig argument does not name a valid EGLConfig.";
}

// An EGLContext argument does not name a valid EGLContext.
// Any command taking an EGLContext parameter may generate this error.
class BadContext extends Error {
	public static inline var CODE = 0x3006;
	public static inline var MEANING = "An EGLContext argument does not name a valid EGLContext.";
}

// The current surface of the calling thread is a window, pbuffer, or pixmap that
// is no longer valid.
class BadCurrentSurface extends Error {
	public static inline var CODE = 0x3007;
	public static inline var MEANING = "The current surface of the calling thread is a window, pbuffer, or pixmap that is no longer valid.";
}

// An EGLDisplay argument does not name a valid EGLDisplay.
// Any command taking an EGLDisplay parameter may generate this error.
class BadDisplay extends Error {
	public static inline var CODE = 0x3008;
	public static inline var MEANING = "An EGLDisplay argument does not name a valid EGLDisplay.";
}

// Arguments are inconsistent; for example, an otherwise valid context requires
// buffers (e.g. depth or stencil) not allocated by an otherwise valid surface.
class BadMatch extends Error {
	public static inline var CODE = 0x3009;
	public static inline var MEANING = "Arguments are inconsistent; for example, an otherwise valid context requires buffers (e.g. depth or stencil) not allocated by an otherwise valid surface.";
}

// An EGLNativePixmapType argument does not refer to a valid native pixmap.
// Any command taking an EGLNativePixmapType parameter may generate this error.
class BadNativePixmap extends Error {
	public static inline var CODE = 0x300a;
	public static inline var MEANING = "An EGLNativePixmapType argument does not refer to a valid native pixmap.";
}

// An EGLNativeWindowType argument does not refer to a valid native window.
// Any command taking an EGLNativeWindowType parameter may generate this error.
class BadNativeWindow extends Error {
	public static inline var CODE = 0x300b;
	public static inline var MEANING = "An EGLNativeWindowType argument does not refer to a valid native window.";
}

// One or more argument values are invalid.
// Any command taking parameters may generate this error.
class BadParameter extends Error {
	public static inline var CODE = 0x300c;
	public static inline var MEANING = "One or more argument values are invalid.";
}

// An EGLSurface argument does not name a valid surface (window, pbuffer, or
// pixmap) configured for rendering.
// Any command taking an EGLSurface parameter may generate this error.
class BadSurface extends Error {
	public static inline var CODE = 0x300d;
	public static inline var MEANING = "An EGLSurface argument does not name a valid surface (window, pbuffer, or pixmap) configured for rendering.";
}

// A power management event has occurred. The application must destroy all
// contexts and reinitialise client API state and objects to continue rendering.
// Any command may generate this error.
class ContextLost extends Error {
	public static inline var CODE = 0x300e;
	public static inline var MEANING = "A power management event has occurred. The application must destroy all contexts and reinitialise client API state and objects to continue rendering.";
}
